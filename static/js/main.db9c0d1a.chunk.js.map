{"version":3,"sources":["store/movies.js","components/SearchBox.jsx","container/Header.jsx","components/LazyImage.jsx","components/MovieItem.jsx","container/App.js","serviceWorker.js","index.js"],"names":["movies","data","page","content","pageRequested","initialState","searchText","SearchBox","onSearchChange","className","type","onChange","src","process","alt","Header","style","background","backgroundPosition","backgroundSize","backgroundRepeat","e","props","search","target","value","Component","connect","dispatch","key","payload","LazyImage","this","effect","React","MovieItem","movie","srcImage","includes","name","length","slice","App","Number","filter","toUpperCase","indexOf","backgroundColor","marginTop","pageStart","loadMore","fetch","hasMore","getLoadMore","loader","textAlign","getItems","map","index","state","data1","data2","fetchMovies","Boolean","window","location","hostname","match","store","createStore","action","concat","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"68EAQIA,EAASC,EAAKC,KAAK,iBAAiBC,QACpCC,EAAgB,GAuBpB,IAAMC,EAAe,CACnBL,OAAQ,GACRI,cAAe,GACfE,WAAY,ICdCC,MAnBf,YAAwC,IAAnBC,EAAkB,EAAlBA,eACnB,OACE,yBAAKC,UAAU,6DACb,2BACEC,KAAK,OACLC,SAAUH,EACVC,UAAU,uKAEZ,0BAAMA,UAAU,mJACd,yBACEG,IAAKC,qCACLC,IAAI,cACJL,UAAU,WCTdM,E,uKACM,IAAD,OACP,OACE,yBACEN,UAAU,oEACVO,MAAO,CACLC,WAAW,OAAD,OAASJ,sCAAT,MACVK,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,cAGpB,yBAAKX,UAAU,oCACb,yBACEG,IAAKC,mCACLC,IAAI,cACJL,UAAU,QAEZ,uBAAGA,UAAU,4BAAb,oBAEF,kBAAC,EAAD,CAAWD,eAAgB,SAACa,GAAD,OAAO,EAAKC,MAAMC,OAAOF,EAAEG,OAAOC,e,GApBhDC,aA+BNC,cAAQ,MALI,SAACC,GAC1B,MAAO,CACLL,OAAQ,SAACM,GAAD,OAASD,EFNd,SAAgBC,GACrB,MAAO,CAAEnB,KAtBI,SAsBUoB,QAASD,GEKJN,CAAOM,QAGtBF,CAAkCZ,G,QChC5BgB,G,6KAEjB,OACE,kBAAC,gBAAD,CACEnB,IAAKoB,KAAKV,MAAMV,IAChBH,UAAU,sBACVwB,OAAO,a,GANwBC,IAAMR,YCc9BS,MAff,YAA+B,IAAVC,EAAS,EAATA,MACfC,EAAWD,EAAM,gBAAgBE,SAAS,uBAA/B,gEAEAF,EAAM,iBAEjBG,EACFH,EAAMG,KAAKC,OAAS,GAAKJ,EAAMG,KAAKE,MAAM,EAAG,IAAM,MAAQL,EAAMG,KACnE,OACE,yBAAK9B,UAAU,sBACb,kBAAC,EAAD,CAAWG,IAAKC,mBAAyBwB,IACzC,uBAAG5B,UAAU,6CAA6C8B,EAA1D,OCNAG,E,4KAEF,OAAmC,IAA5BC,OAAOX,KAAKV,MAAMpB,QAAe8B,KAAKV,MAAMhB,a,iCAKzC,IAAD,OAQT,OAPqB0B,KAAKV,MAAMtB,OAAO4C,QAAO,SAACR,GAC7C,OAGuD,IAFrDA,EAAMG,KACHM,cACAC,QAAQ,EAAKxB,MAAMhB,WAAWuC,oB,+BAOrC,OACE,oCACE,kBAAC,EAAD,MACA,yBAAK7B,MAAO,CAAE+B,gBAAiB,UAAWC,UAAW,SACnD,kBAAC,IAAD,CACEC,UAAW,EACXC,SAAUlB,KAAKV,MAAM6B,MACrBC,QAASpB,KAAKqB,cACdC,OACE,yBAAK7C,UAAU,SAASO,MAAO,CAAEuC,UAAW,UAAY1B,IAAK,GAA7D,gBAKF,yBAAKpB,UAAU,mFACZuB,KAAKwB,WAAWC,KAAI,SAACrB,EAAOsB,GAAR,OACnB,kBAAC,EAAD,CAAW7B,IAAK6B,EAAOtB,MAAOA,e,GAnC5BV,aA2DHC,eAdS,SAACgC,GACvB,MAAO,CACL3D,OAAQ2D,EAAM3D,OACdE,KAAMyD,EAAMvD,cACZE,WAAYqD,EAAMrD,eAIK,SAACsB,GAC1B,MAAO,CACLuB,MAAO,SAACjD,GAAD,OAAU0B,ELlDd,SAAqB1B,GAW1B,OAVa,IAATA,GACFF,EAASC,EAAKC,KAAK,iBAAiBC,QACpCC,EAAgBH,EAAKC,KAAK,uBACR,IAATA,GACTF,EAAS4D,EAAM1D,KAAK,iBAAiBC,QACrCC,EAAgBwD,EAAM1D,KAAK,uBACT,IAATA,IACTF,EAAS6D,EAAM3D,KAAK,iBAAiBC,QACrCC,EAAgByD,EAAM3D,KAAK,uBAEtB,CAAEQ,KAlBO,YAkBUoB,QAAS,CAAE9B,SAAQI,kBKuCjB0D,CAAY5D,QAI3ByB,CAA6Ce,GCtDxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,aP8Ba,WAAmC,IAAlCV,EAAiC,uDAAzBtD,EAAciE,EAAW,uCAC3D,OAAQA,EAAO5D,MACb,IApCc,YAqCZ,OAAO,2BACFiD,GADL,IAEE3D,OAAQ2D,EAAM3D,OAAOuE,OAAOD,EAAOxC,QAAQ9B,QAC3CI,cAAekE,EAAOxC,QAAQ1B,gBAGlC,IA1CW,SA2CT,OAAO,2BACFuD,GADL,IAEErD,WAAYgE,EAAOxC,UAGvB,QACE,OAAO6B,MO7Cba,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.db9c0d1a.chunk.js","sourcesContent":["import data from \"../api/CONTENTLISTINGPAGE-PAGE1.json\";\nimport data1 from \"../api/CONTENTLISTINGPAGE-PAGE2.json\";\nimport data2 from \"../api/CONTENTLISTINGPAGE-PAGE3.json\";\n\n//action types\nconst FETCH_ALL = \"FETCH_ALL\";\nconst SEARCH = \"SEARCH\";\n\nlet movies = data.page[\"content-items\"].content;\nlet pageRequested = \"\";\n\n//movie action\nexport function fetchMovies(page) {\n  if (page === 1) {\n    movies = data.page[\"content-items\"].content;\n    pageRequested = data.page[\"page-num-requested\"];\n  } else if (page === 2) {\n    movies = data1.page[\"content-items\"].content;\n    pageRequested = data1.page[\"page-num-requested\"];\n  } else if (page === 3) {\n    movies = data2.page[\"content-items\"].content;\n    pageRequested = data2.page[\"page-num-requested\"];\n  }\n  return { type: FETCH_ALL, payload: { movies, pageRequested } };\n}\n\n//search action\nexport function search(key) {\n  return { type: SEARCH, payload: key };\n}\n\n//initial state\nconst initialState = {\n  movies: [],\n  pageRequested: \"\",\n  searchText: \"\",\n};\n\n//reducer\nexport const rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_ALL:\n      return {\n        ...state,\n        movies: state.movies.concat(action.payload.movies),\n        pageRequested: action.payload.pageRequested,\n      };\n\n    case SEARCH:\n      return {\n        ...state,\n        searchText: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\n\nfunction SearchBox({ onSearchChange }) {\n  return (\n    <div className=\"relative flex w-1/4  flex-wrap items-end justify-end mb-3\">\n      <input\n        type=\"text\"\n        onChange={onSearchChange}\n        className=\"px-3 py-3 placeholder-gray-400 text-gray-700 relative rounded text-sm z-10 outline-none focus:outline-none focus:shadow-outline w-full pr-10 bg-black bg-opacity-0\"\n      />\n      <span className=\"h-full leading-snug font-normal absolute text-center text-gray-400 absolute rounded text-base items-center justify-center w-8 right-0 pr-3 py-3\">\n        <img\n          src={process.env.PUBLIC_URL + \"/slices/search.png\"}\n          alt=\"back_Button\"\n          className=\"w-5\"\n        />\n      </span>\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { search } from \"../store/movies\";\nimport SearchBox from \"../components/SearchBox\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div\n        className=\"bg-transparent flex px-3 justify-between fixed w-full z-40 top-0 \"\n        style={{\n          background: `url(${process.env.PUBLIC_URL + \"/slices/nav_bar.png\"} )`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        <div className=\"flex justify-center items-center\">\n          <img\n            src={process.env.PUBLIC_URL + \"/slices/Back.png\"}\n            alt=\"back_Button\"\n            className=\"w-5\"\n          />\n          <p className=\"text-white px-5 text-sm \">Romantic Comedy</p>\n        </div>\n        <SearchBox onSearchChange={(e) => this.props.search(e.target.value)} />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    search: (key) => dispatch(search(key)),\n  };\n};\nexport default connect(null, mapDispatchToProps)(Header);\n","import React from \"react\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\n\nexport default class LazyImage extends React.Component {\n  render() {\n    return (\n      <LazyLoadImage\n        src={this.props.src}\n        className=\" min-w-full lg:w-48\"\n        effect=\"blur\"\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport LazyImage from \"./LazyImage.jsx\";\n\nfunction MovieItem({ movie }) {\n  let srcImage = movie[\"poster-image\"].includes(\"posterthatismissing\")\n    ? `/slices/placeholder_for_missing_posters.png`\n    : `/slices/${movie[\"poster-image\"]}`;\n\n  let name =\n    movie.name.length > 15 ? movie.name.slice(0, 10) + \"...\" : movie.name;\n  return (\n    <div className=\"lg:mb-16 pr-5 mb-4\">\n      <LazyImage src={process.env.PUBLIC_URL + srcImage} />\n      <p className=\"text-gray-500 lg:text-sm text-xs lg:my-2 \">{name} </p>\n    </div>\n  );\n}\n\nexport default MovieItem;\n","import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport MovieItem from \"../components/MovieItem\";\nimport { fetchMovies } from \"../store/movies\";\n\nclass App extends Component {\n  getLoadMore() {\n    return Number(this.props.page) === 3 || this.props.searchText\n      ? false\n      : true;\n  }\n\n  getItems() {\n    let filteredMovies = this.props.movies.filter((movie) => {\n      return (\n        movie.name\n          .toUpperCase()\n          .indexOf(this.props.searchText.toUpperCase()) !== -1\n      );\n    });\n    return filteredMovies;\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <div style={{ backgroundColor: \"#171717\", marginTop: \"35px\" }}>\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={this.props.fetch}\n            hasMore={this.getLoadMore()}\n            loader={\n              <div className=\"loader\" style={{ textAlign: \"center\" }} key={0}>\n                Loading ...\n              </div>\n            }\n          >\n            <div className=\"grid grid-cols-3 lg:grid-cols-5 sm:grid-cols-4 lg:ml-12 lg:pt-12 ml-5 py-6 pt-8\">\n              {this.getItems().map((movie, index) => (\n                <MovieItem key={index} movie={movie} />\n              ))}\n            </div>\n          </InfiniteScroll>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    movies: state.movies,\n    page: state.pageRequested,\n    searchText: state.searchText,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetch: (page) => dispatch(fetchMovies(page)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport \"./styles/tailwind.css\";\nimport App from \"./container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { rootReducer } from \"./store/movies\";\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}